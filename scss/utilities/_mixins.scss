@use '../custom' as *;


/* If I want to create a mixin that uses any color I have to include my color variables in this file
** but I don't want to do that since I have a lot of gradient colors and don't want to fill this file with
** just colors so all color related mixins go in gradients partial */

// Full Size
@mixin fullSize {
    width: 100%;
    height: 100%;
}

// Center an Element
@mixin absoluteCenter {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

// Transition
@mixin transitionProperty {
    transition-duration: 1000ms;
    transition-property: all;
}

// Scroll Hover
@mixin btnHover {
    transform: scale(1.2);
}


// Transition Speed
@mixin transitionSpeed {
    transition: all 200ms ease ;
}


// Section Container
@mixin sectionBorder($color) {
    background-color: $bg-primary-light;
    position: relative;
    
    flex-direction: column;
    // justify-content: center;
    padding-bottom: 3.125rem; // 50px
    border-top: 10px inset $color;
    width: 100%;
} 


/* -------------------------------------------------------------------------- */
/*                                 Breakpoints                                */
/* -------------------------------------------------------------------------- */
// Breakpoints Map
$breakpoints: (
  'xs': 361px,
  'sm': 577px,
  'md': 769px,
  'lg': 993px,
  'xl': 1201px,
  'xxl': 1401px,
  ) !default;
  
// ======= Mixin to manage responsive breakpoints
// name of mixin
@mixin respond-to-up($breakpoint) {                    // Viewports higher than target will apply media query
    // if key exists
    @if map-has-key($breakpoints, $breakpoint) {
        // query printed based on value
        @media (min-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }        
    }
    
}

@mixin respond-to-down($breakpoint) {                    // Viewports lower than target will apply media query
    // if key exists
    @if map-has-key($breakpoints, $breakpoint) {
        // query printed based on value
        @media (max-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }        
    }
    
}










